local function find_uvrect(sprite_url, image_id)
    assert(type(image_id) == "string", "`image_id` should be a string")
    local atlas = go.get(sprite_url, "image")
    local atlas_data = resource.get_atlas(atlas)
    local tex_info = resource.get_texture_info(atlas_data.texture)

    local image_num
    for i, animation in ipairs(atlas_data.animations) do
        if animation.id == image_id then
            image_num = i
            break
        end
    end
    assert(image_num, "Unable to find image " .. image_id)

    local uvs = atlas_data.geometries[image_num].uvs
    assert(#uvs == 8)

    local tex_w = tex_info.width
    local tex_h = tex_info.height

    local position_x = uvs[1]
    local position_y = uvs[6]
    local width = uvs[5] - uvs[1]
    local height = uvs[2] - uvs[6]
    -- pprint(position_x, tex_h - position_y, width, height)

    return (position_x + width/2) / tex_w,         -- x + w/2
        (tex_h - (position_y + height/2)) / tex_h, -- y + h/2
        width / tex_w,                             -- w
        height / tex_h                             -- h
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

    -- go.animate("/obj", "position.x", go.PLAYBACK_LOOP_PINGPONG, 200, go.EASING_INOUTSINE, 2)

    -- local atlas = go.get("/obj#logo1", "image")
    -- local atlas_data = resource.get_atlas(atlas)
    -- pprint(atlas_data)

    go.set("/obj#logo1", "noise_uvrect", vmath.vector4(find_uvrect("/obj#logo1", "noise")))
    go.set("/obj#logo1", "ramp_uvrect", vmath.vector4(find_uvrect("/obj#logo1", "ramp")))

    -- timer.delay(2, true, function (self)
    --     go.set("/obj#logo1", "dissolve.w", 0.0)
    --     go.animate("/obj#logo1", "dissolve.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INSINE, 1, 0.5)
    -- end)
    go.animate("/obj#logo1", "dissolve.w", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_LINEAR, 2)
    
    -- go.animate("/obj#logo2", "dissolve.w", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_LINEAR, 2)
    -- go.animate("/obj#logo3", "dissolve.w", go.PLAYBACK_LOOP_PINGPONG, 1, go.EASING_LINEAR, 2)
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        print("Touch!")
    end
end
